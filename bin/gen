#!/usr/bin/env bash

set -e
set -o pipefail

PROJECT_NAME="$(basename "$(pwd)")"

# .npmrc
.npmrc() {
    cat >.npmrc <<-EOF
message="chore: release v%s"
registry=https://registry.npmmirror.com
# shamefully-hoist=true
# auto-install-peers=true

# mirrors: refs: https://github.com/cnpm/binary-mirror-config/blob/master/package.json#L49
COREPACK_NPM_REGISTRY=https://registry.npmmirror.com
NODEJS_ORG_MIRROR=https://cdn.npmmirror.com/binaries/node
NVM_NODEJS_ORG_MIRROR=https://cdn.npmmirror.com/binaries/node
PHANTOMJS_CDNURL=https://cdn.npmmirror.com/binaries/phantomjs
CHROMEDRIVER_CDNURL=https://cdn.npmmirror.com/binaries/chromedriver
OPERADRIVER_CDNURL=https://cdn.npmmirror.com/binaries/operadriver
CYPRESS_DOWNLOAD_PATH_TEMPLATE=https://cdn.npmmirror.com/binaries/cypress/\\\$\\{version\\}/\\\$\\{platform\\}-\\\$\\{arch\\}/cypress.zip
ELECTRON_MIRROR=https://cdn.npmmirror.com/binaries/electron/
ELECTRON_BUILDER_BINARIES_MIRROR=https://cdn.npmmirror.com/binaries/electron-builder-binaries/
SASS_BINARY_SITE=https://cdn.npmmirror.com/binaries/node-sass
SWC_BINARY_SITE=https://cdn.npmmirror.com/binaries/node-swc
NWJS_URLBASE=https://cdn.npmmirror.com/binaries/nwjs/v
PUPPETEER_DOWNLOAD_HOST=https://cdn.npmmirror.com/binaries
PLAYWRIGHT_DOWNLOAD_HOST=https://cdn.npmmirror.com/binaries/playwright
SENTRYCLI_CDNURL=https://cdn.npmmirror.com/binaries/sentry-cli
SAUCECTL_INSTALL_BINARY_MIRROR=https://cdn.npmmirror.com/binaries/saucectl
RE2_DOWNLOAD_MIRROR=https://cdn.npmmirror.com/binaries/node-re2
RE2_DOWNLOAD_SKIP_PATH=true
npm_config_better_sqlite3_binary_host=https://cdn.npmmirror.com/binaries/better-sqlite3
npm_config_keytar_binary_host=https://cdn.npmmirror.com/binaries/keytar
npm_config_sharp_binary_host=https://cdn.npmmirror.com/binaries/sharp
npm_config_sharp_libvips_binary_host=https://cdn.npmmirror.com/binaries/sharp-libvips
npm_config_robotjs_binary_host=https://cdn.npmmirror.com/binaries/robotj
EOF
}

# .nvmrc
.nvmrc() {
    cat >.nvmrc <<-EOF
$(node -v)
EOF
}

.prettierrc.json() {
    cat >.prettierrc.json <<-EOF
{
  "$schema": "http://json.schemastore.org/prettierrc",
  "trailingComma": "all",
  "singleQuote": true,
  "semi": false,
  "useTabs": false,
  "tabWidth": 2,
  "arrowParens": "avoid"
}
EOF
}

# .gitignore
.gitignore() {
    cat >.gitignore <<-EOF
# Mac
.DS_Store

# Node.js
node_modules
dist

# Editor
.idea

# Logs
*.log
*.logs

# Envs
.env
.env.*.local
EOF
}

# .gitattributes
.gitattributes() {
    cat >.gitattributes <<-EOF
* text=auto eol=lf
EOF
}

generate_file() {
    if [[ -z "$file" ]]; then
        echo "Pass a file name to generate_file." 1>&2
        exit 1
    fi
}

main() {
    echo "Generating project files for '${PROJECT_NAME}'..."

    whitelist=(".npmrc" ".nvmrc" ".prettierrc.json" ".gitignore" ".gitattributes")

    # Usage
    if [[ $# -eq 0 ]]; then
        echo "Usage: gen <filename>"
        echo "Supported filenames: ${whitelist[*]}"
        exit 1
    fi

    for name in "$@"; do
        # is in whitelist array ?
        if [[ ! " ${whitelist[*]} " =~ " ${name} ".* ]]; then
            echo "- Skipping '${name}' don't support"
            continue
        fi

        # TODO: echo "xx" already exists. Skipping."
        echo "- Generating '${name}'..."
        eval "$name"
    done
}

main "$@"
